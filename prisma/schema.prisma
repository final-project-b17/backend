// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

model Course {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  price         Float
  type_course   String
  level         String
  url_course    String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  category_id   Int
  Category      Category  @relation(fields: [category_id], references: [id])
  chapters      Chapter[]
  orders        Order[]
  comments      Comment[]
  ratings       Rating[]
}

model Chapter {
  id         Int      @id @default(autoincrement())
  title      String
  course_id  Int
  content    String
  url_video  String
  Course     Course   @relation(fields: [course_id], references: [id])
}

model Category {
  id     Int      @id @default(autoincrement())
  title  String
  courses Course[]
}

model User {
  id                  Int       @id @default(autoincrement())
  username            String
  email               String    @unique
  password            String
  role                String
  otp_code            String
  resetPasswordToken  String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  orders              Order[]
  profile             Profile?
  comments            Comment[]
  ratings             Rating[]
}

model Profile {
  id      Int     @id @default(autoincrement())
  user_id Int @unique
  name    String
  no_telp String
  avatar  String
  city    String
  country String
  user   User @relation(fields: [user_id], references: [id])
}

model Order {
  id                Int       @id @default(autoincrement())
  course_id         Int
  user_id           Int
  payment_methods_id Int
  status            String
  reference         String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  course            Course    @relation(fields: [course_id], references: [id])
  user              User      @relation(fields: [user_id], references: [id])
  payment_method    PaymentMethod @relation(fields: [payment_methods_id], references: [id])
}

model PaymentMethod {
  id       Int      @id @default(autoincrement())
  name     String
  logo     String
  is_active String
  orders   Order[]
}

model Comment {
  id       Int      @id @default(autoincrement())
  video_id Int
  user_id  Int
  course_id Int
  content  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user     User      @relation(fields: [user_id], references: [id])
  course   Course    @relation(fields: [course_id], references: [id])
}

model Rating {
  id       Int      @id @default(autoincrement())
  course_id Int
  user_id  Int
  rating   Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  course   Course    @relation(fields: [course_id], references: [id])
  user     User      @relation(fields: [user_id], references: [id])
}
